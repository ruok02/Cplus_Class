1. Git Bash 실행:

Windows 검색창에 "Git Bash"를 입력하고 실행합니다.
2. 로컬 프로젝트 폴더로 이동:

cd (change directory) 명령어를 사용하여 C++ 프로젝트 폴더 C:\C++\chap1\Hello로 이동합니다.

Bash

cd C:/C++/chap1/Hello
주의: 경로에 공백이 포함되어 있다면 "로 묶어주거나 공백 앞에 \를 붙여야 합니다. 예를 들어 cd "C:/C++ Projects/chap1/Hello" 또는 cd C:/C++\ Projects/chap1/Hello.

3. Git 초기화:

현재 폴더를 Git Repository로 초기화합니다. 이 명령어는 .git이라는 숨겨진 폴더를 생성하여 Git이 버전 관리를 시작할 수 있도록 합니다.

Bash

git init
실행 후 Initialized empty Git repository in C:/C++/chap1/Hello/.git/와 같은 메시지가 표시될 것입니다.

4. 원격 Repository 연결:

로컬 Repository를 GitHub의 Cplus_Class Repository와 연결합니다.

Bash

git remote add origin https://github.com/ruok02/Cplus_Class.git
origin은 일반적으로 원격 Repository의 기본 이름으로 사용됩니다.

5. .gitignore 파일 생성 (권장):

C++ 프로젝트에서 생성되는 불필요한 파일 (예: 실행 파일, 임시 빌드 파일 등)이 GitHub에 올라가지 않도록 .gitignore 파일을 생성합니다.

텍스트 편집기 (예: 메모장)를 열고 다음 내용을 복사하여 붙여넣습니다. (일반적인 C++ 빌드 관련 무시 파일 예시입니다. 프로젝트 환경에 따라 더 추가해야 할 수도 있습니다.)

*.exe
*.o
*.obj
*.dll
*.lib
*.pdb
*.ilk
*.map
*.sbr
Debug/
Release/
ipch/
[Bb]uild/
파일을 C:\C++\chap1\Hello 폴더에 .gitignore 라는 이름으로 저장합니다. (확장자가 .txt가 아닌지 확인하세요.)

6. 파일 추가:

로컬 프로젝트의 모든 파일들을 Git의 Staging Area에 추가합니다.

Bash

git add .
. 은 현재 폴더의 모든 변경된 파일과 새 파일을 의미합니다. .gitignore 파일에 명시된 파일들은 자동으로 제외됩니다.

7. 커밋:

Staging Area에 있는 파일들을 로컬 Repository에 저장하는 커밋을 만듭니다. 커밋 메시지는 변경 사항에 대한 설명을 담습니다.

Bash

git commit -m "Initial commit of C++ Hello project"
커밋 메시지는 간결하고 명확하게 작성하는 것이 좋습니다.

8. GitHub Repository로 푸시:

로컬 Repository의 main 브랜치 (기본적으로 생성됨)에 있는 커밋들을 원격 origin의 main 브랜치로 푸시합니다. 처음 푸시할 때는 -u 옵션을 사용하여 로컬 main 브랜치와 원격 origin/main 브랜치를 연결해 주는 것이 좋습니다.

Bash

git push -u origin main
만약 GitHub Repository의 기본 브랜치 이름이 master로 되어 있다면 main 대신 master를 사용해야 합니다. GitHub 웹사이트의 Cplus_Class Repository 페이지에서 기본 브랜치 이름을 확인 후 명령어에 맞춰 사용하세요. (최근 생성된 Repository는 대부분 main이 기본입니다.)

9. (만약 main 브랜치가 없는 경우):

만약 로컬 Repository에 main 브랜치가 아직 없다면 (예: git init 직후 바로 푸시하려는 경우), 다음과 같이 먼저 main 브랜치를 만들고 푸시할 수 있습니다.

Bash

git branch -M main
git push -u origin main
-M main은 현재 브랜치 이름을 main으로 변경하는 명령어입니다.

이 단계를 모두 완료하면 C:\C++\chap1\Hello 폴더의 내용이 Cplus_Class GitHub Repository와 성공적으로 연동됩니다. 이후 이 폴더에서 C++ 코드를 수정하거나 새로운 파일을 추가하고, Git Bash를 사용하여 git add, git commit, git push 명령어를 통해 GitHub에 변경 사항을 반영할 수 있습니다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
계속 오류 나는 도움 코드
오류 메시지 fatal: refusing to merge unrelated histories는 로컬 Repository와 원격 Repository가 완전히 다른 이력을 가지고 있어 Git이 자동으로 병합하는 것을 거부했다는 의미입니다.

이 문제는 일반적으로 다음과 같은 경우에 발생합니다.

GitHub Repository를 생성할 때 README.md, LICENSE, .gitignore 등의 파일을 추가하고 초기 커밋이 만들어진 상태에서, 로컬 Repository에서는 아직 아무런 커밋도 하지 않은 상태로 git pull을 시도할 때. Git은 공통된 조상이 없는 두 개의 완전히 독립적인 이력을 병합하는 것을 기본적으로 막습니다.
해결 방법:

이 문제를 해결하는 가장 일반적이고 안전한 방법은 강제로 병합을 허용하는 옵션을 사용하여 git pull을 실행하는 것입니다. --allow-unrelated-histories 옵션을 git pull 명령어에 추가하면 됩니다.

Bash

git pull origin main --allow-unrelated-histories
